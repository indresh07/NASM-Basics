     1                                  %include "include/io.mac"
     2                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     3                              <1> extern   proc_GetStr, proc_GetCh
     4                              <1> extern   proc_PutInt, proc_GetInt
     5                              <1> extern   proc_PutLInt, proc_GetLInt
     6                              <1> 
     7                              <1> ;;-------------------------------------------------------------------
     8                              <1> %macro  .STARTUP  0
     9                              <1> ;group dgroup .data .bss
    10                              <1>         global   _start
    11                              <1> _start:
    12                              <1> %endmacro
    13                              <1> ;;-------------------------------------------------------------------
    14                              <1> 
    15                              <1> 
    16                              <1> ;;-------------------------------------------------------------------
    17                              <1> %macro  .EXIT  0
    18                              <1>         mov    EAX,1
    19                              <1>         xor    EBX,EBX
    20                              <1>         int    0x80
    21                              <1> %endmacro
    22                              <1> ;;-------------------------------------------------------------------
    23                              <1> 
    24                              <1> 
    25                              <1> ;;-------------------------------------------------------------------
    26                              <1> %macro  .DATA 0
    27                              <1>         segment .data
    28                              <1> %endmacro
    29                              <1> ;;-------------------------------------------------------------------
    30                              <1> 
    31                              <1> ;;-------------------------------------------------------------------
    32                              <1> %macro  .UDATA 0
    33                              <1>         segment .bss
    34                              <1> %endmacro
    35                              <1> ;;-------------------------------------------------------------------
    36                              <1> 
    37                              <1> ;;-------------------------------------------------------------------
    38                              <1> %macro  .CODE 0
    39                              <1>         segment .data
    40                              <1>         segment .bss
    41                              <1>         segment .text
    42                              <1> %endmacro
    43                              <1> ;;-------------------------------------------------------------------
    44                              <1> 
    45                              <1> 
    46                              <1> ;;-------------------------------------------------------------------
    47                              <1> %macro  nwln  0 
    48                              <1>         call    proc_nwln
    49                              <1> %endmacro
    50                              <1> ;;-------------------------------------------------------------------
    51                              <1> 
    52                              <1> 
    53                              <1> ;;-------------------------------------------------------------------
    54                              <1> %macro  PutCh  1 
    55                              <1>         push    AX
    56                              <1>         mov     AL,%1
    57                              <1>         call    proc_PutCh
    58                              <1>         pop     AX
    59                              <1> %endmacro
    60                              <1> ;;-------------------------------------------------------------------
    61                              <1> 
    62                              <1> 
    63                              <1> ;;-------------------------------------------------------------------
    64                              <1> %macro  PutStr  1 
    65                              <1>         push    ECX
    66                              <1>         mov     ECX,%1
    67                              <1>         call    proc_PutStr
    68                              <1>         pop     ECX
    69                              <1> %endmacro
    70                              <1> ;;-------------------------------------------------------------------
    71                              <1> 
    72                              <1> 
    73                              <1> ;;-------------------------------------------------------------------
    74                              <1> %macro  GetStr  1-2 81
    75                              <1>         push    ESI
    76                              <1>         push    EDI
    77                              <1>         mov     EDI,%1
    78                              <1>         mov     ESI,%2
    79                              <1>         call    proc_GetStr
    80                              <1>         pop     EDI
    81                              <1>         pop     ESI
    82                              <1> %endmacro
    83                              <1> ;;-------------------------------------------------------------------
    84                              <1> 
    85                              <1> 
    86                              <1> ;;-------------------------------------------------------------------
    87                              <1> %macro  GetCh   1
    88                              <1>         push    SI
    89                              <1>         xor     SI,SI
    90                              <1> %ifidni %1,AL
    91                              <1>         ;inc     SI
    92                              <1>         call    proc_GetCh
    93                              <1> %elifidni %1,AH
    94                              <1>         mov     SI,1
    95                              <1>         call    proc_GetCh
    96                              <1> %else
    97                              <1>         push    AX
    98                              <1>         call    proc_GetCh
    99                              <1>         mov     %1,AL
   100                              <1>         pop     AX
   101                              <1> %endif
   102                              <1>         pop     SI
   103                              <1> %endmacro
   104                              <1> ;;-------------------------------------------------------------------
   105                              <1> 
   106                              <1> 
   107                              <1> ;;-------------------------------------------------------------------
   108                              <1> %macro  PutInt  1
   109                              <1>         push    AX
   110                              <1>         mov     AX,%1
   111                              <1>         call    proc_PutInt
   112                              <1>         pop     AX
   113                              <1> %endmacro
   114                              <1> ;;-------------------------------------------------------------------
   115                              <1> 
   116                              <1> 
   117                              <1> ;;-------------------------------------------------------------------
   118                              <1> %macro  GetInt  1
   119                              <1> %ifnidni %1,AX
   120                              <1>         push    AX
   121                              <1>         call    proc_GetInt
   122                              <1>         mov     %1,AX
   123                              <1> 	  pop     AX
   124                              <1> %else 
   125                              <1>         call  proc_GetInt
   126                              <1> %endif
   127                              <1> %endmacro
   128                              <1> ;;-------------------------------------------------------------------
   129                              <1> 
   130                              <1> ;;-------------------------------------------------------------------
   131                              <1> %macro  PutLInt  1
   132                              <1>         push    EAX
   133                              <1>         mov     EAX,%1
   134                              <1>         call    proc_PutLInt
   135                              <1>         pop     EAX
   136                              <1> %endmacro
   137                              <1> ;;-------------------------------------------------------------------
   138                              <1> 
   139                              <1> ;;-------------------------------------------------------------------
   140                              <1> %macro  GetLInt  1
   141                              <1> %ifnidni %1,EAX
   142                              <1>         push    EAX
   143                              <1>         call    proc_GetLInt
   144                              <1>         mov     %1,EAX
   145                              <1> 	  pop     EAX
   146                              <1> %else 
   147                              <1>         call  proc_GetLInt
   148                              <1> %endif
   149                              <1> %endmacro
   150                              <1> ;;-------------------------------------------------------------------
   151                              <1> 
   152                                  
   153                                  %macro printij 2
   154                                  
   155                                  	PutStr obrac
   156                                  	PutInt %1
   157                                  	PutStr cbrac
   158                                  	PutStr obrac
   159                                  	PutInt %2
   160                                  	PutStr cbrac
   161                                  	PutStr colon
   162                                  
   163                                  %endmacro
   164                                  
   165                                  .DATA
   166                              <1>  segment .data
   167 00000000 456E74657220746865-     	rowPrompt	db	"Enter the number of rows in the matrix (max. 10) : ", 0
   168 00000009 206E756D626572206F-
   169 00000012 6620726F777320696E-
   170 0000001B 20746865206D617472-
   171 00000024 697820286D61782E20-
   172 0000002D 313029203A2000     
   173 00000034 456E74657220746865-     	colPrompt	db	"Enter the number of columns in the matrix (max. 10): ", 0
   174 0000003D 206E756D626572206F-
   175 00000046 6620636F6C756D6E73-
   176 0000004F 20696E20746865206D-
   177 00000058 617472697820286D61-
   178 00000061 782E203130293A2000 
   179 0000006A 456E74657220746865-     	valPrompt	db	"Enter the elements ", 0
   180 00000073 20656C656D656E7473-
   181 0000007C 2000               
   182                                  
   183 0000007E 3A2000                  	colon	db 	": ",0
   184 00000081 5B00                    	obrac 	db 	"[",0
   185 00000083 5D00                    	cbrac 	db 	"]",0
   186 00000085 0900                    	tab	  	db 	9, 0
   187                                  
   188                                  
   189 00000087 4D617472697820413A-     	mat1Msg		db	"Matrix A: ", 0
   190 00000090 2000               
   191 00000092 4D617472697820423A-     	mat2Msg		db	"Matrix B: ", 0
   192 0000009B 2000               
   193 0000009D 4D6174726978204120-     	fMatMsg		db	"Matrix A + Matrix B: ", 0
   194 000000A6 2B204D617472697820-
   195 000000AF 423A2000           
   196                                    
   197                                  .UDATA
   198                              <1>  segment .bss
   199                                  
   200 00000000 <res 00000190>          	mat1 	resd 	100
   201 00000190 <res 00000190>          	mat2 	resd 	100
   202                                  	
   203 00000320 <res 00000004>          	m 		resd 	1
   204 00000324 <res 00000004>          	n 		resd 	1
   205 00000328 <res 00000004>          	i 		resd 	1
   206 0000032C <res 00000004>          	j 		resd 	1
   207                                  
   208                                  
   209                                  .CODE
   210                              <1>  segment .data
   211                              <1>  segment .bss
   212                              <1>  segment .text
   213                                  
   214                                  	.STARTUP
   215                              <1> 
   216                              <1>  global _start
   217                              <1> _start:
   218                                  
   219                                  		.main:
   220                                  			PutStr rowPrompt
   221 00000000 51                  <1>  push ECX
   222 00000001 B9[00000000]        <1>  mov ECX,%1
   223 00000006 E8(00000000)        <1>  call proc_PutStr
   224 0000000B 59                  <1>  pop ECX
   225                                  			GetInt [m]
   226                              <1> %ifnidni %1,AX
   227 0000000C 6650                <1>  push AX
   228 0000000E E8(00000000)        <1>  call proc_GetInt
   229 00000013 66A3[20030000]      <1>  mov %1,AX
   230 00000019 6658                <1>  pop AX
   231                              <1> %else
   232                              <1>  call proc_GetInt
   233                              <1> %endif
   234                                  
   235 0000001B 833D[20030000]0A        			cmp dword[m],10
   236 00000022 0F8DCD000000            			jnl done
   237                                  
   238                                  			PutStr colPrompt
   239 00000028 51                  <1>  push ECX
   240 00000029 B9[34000000]        <1>  mov ECX,%1
   241 0000002E E8(00000000)        <1>  call proc_PutStr
   242 00000033 59                  <1>  pop ECX
   243                                  			GetInt [n]
   244                              <1> %ifnidni %1,AX
   245 00000034 6650                <1>  push AX
   246 00000036 E8(00000000)        <1>  call proc_GetInt
   247 0000003B 66A3[24030000]      <1>  mov %1,AX
   248 00000041 6658                <1>  pop AX
   249                              <1> %else
   250                              <1>  call proc_GetInt
   251                              <1> %endif
   252                                  
   253 00000043 833D[24030000]0A        			cmp dword[n],10
   254 0000004A 0F8DA5000000            			jnl done
   255                                    
   256                                    			PutStr mat1Msg
   257 00000050 51                  <1>  push ECX
   258 00000051 B9[87000000]        <1>  mov ECX,%1
   259 00000056 E8(00000000)        <1>  call proc_PutStr
   260 0000005B 59                  <1>  pop ECX
   261                                    			nwln
   262 0000005C E8(00000000)        <1>  call proc_nwln
   263 00000061 BB[00000000]              			mov ebx, mat1
   264 00000066 E893000000                			call read_matrix
   265                                    			nwln
   266 0000006B E8(00000000)        <1>  call proc_nwln
   267                                  
   268                                  			PutStr mat2Msg
   269 00000070 51                  <1>  push ECX
   270 00000071 B9[92000000]        <1>  mov ECX,%1
   271 00000076 E8(00000000)        <1>  call proc_PutStr
   272 0000007B 59                  <1>  pop ECX
   273                                    			nwln
   274 0000007C E8(00000000)        <1>  call proc_nwln
   275 00000081 BB[90010000]              			mov ebx, mat2
   276 00000086 E873000000                			call read_matrix
   277                                    			nwln
   278 0000008B E8(00000000)        <1>  call proc_nwln
   279                                  
   280 00000090 BB[00000000]              			mov ebx, mat1
   281                                    			PutStr mat1Msg
   282 00000095 51                  <1>  push ECX
   283 00000096 B9[87000000]        <1>  mov ECX,%1
   284 0000009B E8(00000000)        <1>  call proc_PutStr
   285 000000A0 59                  <1>  pop ECX
   286                                    			nwln
   287 000000A1 E8(00000000)        <1>  call proc_nwln
   288 000000A6 E865010000                			call display
   289                                    			nwln
   290 000000AB E8(00000000)        <1>  call proc_nwln
   291                                  
   292 000000B0 BB[90010000]              			mov ebx, mat2
   293                                    			PutStr mat2Msg
   294 000000B5 51                  <1>  push ECX
   295 000000B6 B9[92000000]        <1>  mov ECX,%1
   296 000000BB E8(00000000)        <1>  call proc_PutStr
   297 000000C0 59                  <1>  pop ECX
   298                                    			nwln
   299 000000C1 E8(00000000)        <1>  call proc_nwln
   300 000000C6 E845010000                			call display
   301                                    			nwln
   302 000000CB E8(00000000)        <1>  call proc_nwln
   303                                  
   304 000000D0 E8E2000000                			call matrix_add
   305                                  
   306 000000D5 BB[00000000]              			mov ebx, mat1
   307                                    			PutStr fMatMsg
   308 000000DA 51                  <1>  push ECX
   309 000000DB B9[9D000000]        <1>  mov ECX,%1
   310 000000E0 E8(00000000)        <1>  call proc_PutStr
   311 000000E5 59                  <1>  pop ECX
   312                                    			nwln
   313 000000E6 E8(00000000)        <1>  call proc_nwln
   314 000000EB E820010000                			call display
   315                                    			nwln
   316 000000F0 E8(00000000)        <1>  call proc_nwln
   317                                  
   318                                    		done:
   319                                    			.EXIT
   320 000000F5 B801000000          <1>  mov EAX,1
   321 000000FA 31DB                <1>  xor EBX,EBX
   322 000000FC CD80                <1>  int 0x80
   323                                  
   324                                    		read_matrix:
   325                                  
   326 000000FE B800000000                			mov eax, 0
   327                                  
   328 00000103 C705[28030000]0000-       			mov dword[i], 0
   329 0000010B 0000               
   330                                    
   331                                    			rl_mat:
   332 0000010D C705[2C030000]0000-         			mov dword[j], 0
   333 00000115 0000               
   334                                      			cl_mat:
   335                                   
   336                                  	 				printij [i], [j]
   337                              <1> 
   338                              <1>  PutStr obrac
   339 00000117 51                  <2>  push ECX
   340 00000118 B9[81000000]        <2>  mov ECX,%1
   341 0000011D E8(00000000)        <2>  call proc_PutStr
   342 00000122 59                  <2>  pop ECX
   343                              <1>  PutInt %1
   344 00000123 6650                <2>  push AX
   345 00000125 66A1[28030000]      <2>  mov AX,%1
   346 0000012B E8(00000000)        <2>  call proc_PutInt
   347 00000130 6658                <2>  pop AX
   348                              <1>  PutStr cbrac
   349 00000132 51                  <2>  push ECX
   350 00000133 B9[83000000]        <2>  mov ECX,%1
   351 00000138 E8(00000000)        <2>  call proc_PutStr
   352 0000013D 59                  <2>  pop ECX
   353                              <1>  PutStr obrac
   354 0000013E 51                  <2>  push ECX
   355 0000013F B9[81000000]        <2>  mov ECX,%1
   356 00000144 E8(00000000)        <2>  call proc_PutStr
   357 00000149 59                  <2>  pop ECX
   358                              <1>  PutInt %2
   359 0000014A 6650                <2>  push AX
   360 0000014C 66A1[2C030000]      <2>  mov AX,%1
   361 00000152 E8(00000000)        <2>  call proc_PutInt
   362 00000157 6658                <2>  pop AX
   363                              <1>  PutStr cbrac
   364 00000159 51                  <2>  push ECX
   365 0000015A B9[83000000]        <2>  mov ECX,%1
   366 0000015F E8(00000000)        <2>  call proc_PutStr
   367 00000164 59                  <2>  pop ECX
   368                              <1>  PutStr colon
   369 00000165 51                  <2>  push ECX
   370 00000166 B9[7E000000]        <2>  mov ECX,%1
   371 0000016B E8(00000000)        <2>  call proc_PutStr
   372 00000170 59                  <2>  pop ECX
   373                              <1> 
   374                                  
   375                                  			 		GetInt dx
   376                              <1> %ifnidni %1,AX
   377 00000171 6650                <1>  push AX
   378 00000173 E8(00000000)        <1>  call proc_GetInt
   379 00000178 6689C2              <1>  mov %1,AX
   380 0000017B 6658                <1>  pop AX
   381                              <1> %else
   382                              <1>  call proc_GetInt
   383                              <1> %endif
   384 0000017D 66891443                			 		mov [ebx + 2 * eax], dx
   385                                  			 		
   386 00000181 40                      			 		inc eax
   387                                  			     
   388 00000182 FF05[2C030000]          			 		inc dword[j]
   389 00000188 668B0D[2C030000]        			 		mov cx, [j]
   390 0000018F 663B0D[24030000]        			 		cmp cx, [n]
   391 00000196 0F8C7BFFFFFF            			 		jl cl_mat
   392                                  		 
   393 0000019C FF05[28030000]              		inc dword[i]
   394 000001A2 668B0D[28030000]            		mov cx, [i]
   395 000001A9 663B0D[20030000]            		cmp cx, [m]
   396 000001B0 0F8C57FFFFFF                		jl rl_mat
   397                                  
   398 000001B6 C3                          		ret
   399                                  
   400                                      	matrix_add:
   401                                  
   402 000001B7 B800000000                  		mov eax, 0
   403 000001BC BE[00000000]                		mov esi, mat1
   404 000001C1 BF[90010000]                		mov edi, mat2
   405                                  
   406 000001C6 C705[28030000]0000-       			mov dword[i], 0
   407 000001CE 0000               
   408                                    
   409                                    			rl_fMat:
   410 000001D0 C705[2C030000]0000-         			mov dword[j], 0
   411 000001D8 0000               
   412                                      			cl_fMat:
   413                                   
   414 000001DA 668B1447                 				mov dx, [edi + 2 * eax]
   415 000001DE 66011446                		 		add  [esi + 2 * eax], dx
   416                                  		 		
   417 000001E2 40                      		 		inc eax
   418                                  
   419 000001E3 FF05[2C030000]          		 		inc dword[j]
   420 000001E9 668B0D[2C030000]        		 		mov cx, [j]
   421 000001F0 663B0D[24030000]        		 		cmp cx, [n]
   422 000001F7 7CE1                    		 		jl cl_fMat
   423                                  		 
   424 000001F9 FF05[28030000]              		inc dword[i]
   425 000001FF 668B0D[28030000]            		mov cx, [i]
   426 00000206 663B0D[20030000]            		cmp cx, [m]
   427 0000020D 7CC1                        		jl rl_fMat    
   428                                  
   429 0000020F C3                          		ret
   430                                  
   431                                      	display:
   432                                  
   433 00000210 B800000000                			mov eax, 0
   434                                  
   435 00000215 C705[28030000]0000-       			mov dword[i], 0
   436 0000021D 0000               
   437                                    
   438                                    			rl_pmat:
   439 0000021F C705[2C030000]0000-         			mov dword[j], 0
   440 00000227 0000               
   441                                      			cl_pmat:
   442                                  
   443                                  		 		PutInt [ebx + 2 * eax]
   444 00000229 6650                <1>  push AX
   445 0000022B 668B0443            <1>  mov AX,%1
   446 0000022F E8(00000000)        <1>  call proc_PutInt
   447 00000234 6658                <1>  pop AX
   448                                  		 		
   449 00000236 40                      		 		inc eax
   450                                  		     	
   451                                  		     	PutStr tab
   452 00000237 51                  <1>  push ECX
   453 00000238 B9[85000000]        <1>  mov ECX,%1
   454 0000023D E8(00000000)        <1>  call proc_PutStr
   455 00000242 59                  <1>  pop ECX
   456                                  
   457 00000243 FF05[2C030000]          		 		inc dword[j]
   458 00000249 668B0D[2C030000]        		 		mov cx, [j]
   459 00000250 663B0D[24030000]        		 		cmp cx, [n]
   460 00000257 7CD0                    		 		jl cl_pmat
   461                                  
   462                                  		 	nwln
   463 00000259 E8(00000000)        <1>  call proc_nwln
   464                                  		 
   465 0000025E FF05[28030000]              		inc dword[i]
   466 00000264 668B0D[28030000]            		mov cx, [i]
   467 0000026B 663B0D[20030000]            		cmp cx, [m]
   468 00000272 7CAB                        		jl rl_pmat
   469                                  
   470 00000274 C3                          		ret
